<?xml version="1.0"?>
<launch>
    <!-- MAVROS posix SITL environment launch script -->
    <!-- launches MAVROS, PX4 SITL, Gazebo environment, and spawns vehicle -->
    <!-- vehicle pose -->
    <arg name="x" default="0"/>
    <arg name="y" default="0"/>
    <arg name="z" default="-4"/>
    <arg name="R" default="0"/>
    <arg name="P" default="0"/>
    <arg name="Y" default="0"/>
    
    <!-- vehicle model and world -->
    <arg name="est" default="ekf2"/>
    <arg name="vehicle" default="uuv_hippocampus"/>
    <arg name="msdf" default="uuv_hippocampus_stereo_camera"/>
    <arg name="world" default="$(find uuv_gazebo_worlds)/worlds/ocean_waves_diver_following.world"/>
    <arg name="sdf" default="$(find mavlink_sitl_gazebo)/models/$(arg msdf)/$(arg msdf).sdf"/>

    <!-- uuv_simulator related arguments -->
    <arg name="gui" default="true"/>
    <arg name="paused" default="false"/>
    <arg name="set_timeout" default="false"/>
    <arg name="timeout" default="0.0"/>
	

    <!-- uuv_simulator world files -->
    <include file="$(find uuv_assistants)/launch/publish_world_ned_frame.launch"/>
    
    <node name="publish_world_models"
        pkg="uuv_assistants"
        type="publish_world_models.py"
        output="screen">
        <rosparam subst_value="true">
            meshes:
                heightmap:
                    mesh: package://uuv_gazebo_worlds/models/sand_heightmap/meshes/heightmap.dae
                    model: sand_heightmap
                seafloor:
                    plane: [2000, 2000, 0.1]
                    pose:
                        position: [0, 0, -100]
                north:
                    plane: [0.1, 2000, 100]
                    pose:
                        position: [1000, 0, -50]
                south:
                    plane: [0.1, 2000, 100]
                    pose:
                        position: [-1000, 0, -50]
                west:
                    plane: [2000, 0.1, 100]
                    pose:
                        position: [0, -1000, -50]
                east:
                    plane: [2000, 0.1, 100]
                    pose:
                        position: [0, 1000, -50]
        </rosparam>
    </node>

    <group if="$(arg set_timeout)">
        <include file="$(find uuv_assistants)/launch/set_simulation_timer.launch">
            <arg name="timeout" value="$(arg timeout)"/>
        </include>
    </group>

    <!-- gazebo configs -->
    <!--arg name="gui" default="true"/ -->
    <arg name="debug" default="false"/>
    <arg name="verbose" default="false"/>
    <!-- arg name="paused" default="false"/ -->
    <arg name="respawn_gazebo" default="false"/>
    <!-- MAVROS configs -->
    <arg name="fcu_url" default="udp://:14540@localhost:14580"/>
    <arg name="respawn_mavros" default="false"/>
    <!-- PX4 configs -->
    <arg name="interactive" default="true"/>
    <!-- PX4 SITL and Gazebo -->
    <include file="$(find px4)/launch/posix_sitl.launch">
        <arg name="x" value="$(arg x)"/>
        <arg name="y" value="$(arg y)"/>
        <arg name="z" value="$(arg z)"/>
        <arg name="R" value="$(arg R)"/>
        <arg name="P" value="$(arg P)"/>
        <arg name="Y" value="$(arg Y)"/>
        <arg name="world" value="$(arg world)"/>
        <arg name="vehicle" value="$(arg vehicle)"/>
        <arg name="sdf" value="$(arg sdf)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="interactive" value="$(arg interactive)"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="verbose" value="$(arg verbose)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="respawn_gazebo" value="$(arg respawn_gazebo)"/>
    </include>
    <!-- MAVROS -->
    <include file="$(find mavros)/launch/px4.launch">
        <!-- GCS link is provided by SITL -->
        <arg name="gcs_url" value=""/>
        <arg name="fcu_url" value="$(arg fcu_url)"/>
        <arg name="respawn_mavros" value="$(arg respawn_mavros)"/>
    </include>


    <!-- offboard control node -->
    <node name="hippocampus_startup"
		pkg="startup_node"
		type="hippocampus_startup"
		output="screen" />


   <!-- sleep for 10 seconds before starting -->
   <arg name="pid_control_start_delay" default="10.0" />  
   <!-- PID controller for the hippocampus --> 
   <node name="pid_control"
		pkg="pid_control"
		type="pid_control" launch-prefix="bash -c 'sleep $(arg pid_control_start_delay); $0 $@' " 
		output="screen" />

   <!-- Static transform publisher for the camera-->
   <node name="camera_link_base_link_transform"
		pkg="tf"
		type="static_transform_publisher"
		args="0.2 0 0.03 0.5 -0.5 0.5 -0.5 base_link camera_link 1000"/>
   
   <!-- stereo image proc for point cloud using stereo camera -->
   <node ns="stereo" name="stereo_image_proc"
		pkg="stereo_image_proc"
		type="stereo_image_proc"/>
   
   <!-- RViz with the required configuration file -->
   <!--node type="rviz" name="rviz" pkg="rviz" args="-d $(find startup_node)/rviz/uuv_hippocampus_pointcloud.rviz" /-->

   <!-- Elevation mapping -->
    <include file="$(find elevation_mapping_demos)/launch/uuv_hippocampus_elevation_map_demo.launch"/>

   <!-- Normal Vector Generation -->
    <include file="$(find normal_vector_generation)/launch/normal_vector_filters_demo.launch"/>


 
</launch>

